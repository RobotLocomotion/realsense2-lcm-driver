#pragma once

#include <array>
#include <atomic>
#include <map>
#include <memory>
#include <mutex>
#include <string>
#include <thread>
#include <vector>

#include <librealsense2/rs.hpp>
#include "rgbd_sensor/rgbd_sensor.h"

namespace rs2_lcm {

/**
 * Only tested to work with D455, D435 and D415 for now.
 *
 * Notes:
 * The depth images and point cloud is set to be post processed by default.
 * Camera settings are saved in json files in /cfg. These config files are
 * hard coded at the moment, can be exposed later if desired. The configs
 * are generated by using Intel's realsense-viewer executable, from which you
 * can experiment with different knobs, and generate a json file.
 *
 * Interference:
 * SR300: yes, some (SR picks up the dots projected by the Ds, but not too bad)
 * D400: no.
 * Mocap: no.
 * Sun: no.
 */
class RealSenseD400 : public RGBDSensor {
 public:
  explicit RealSenseD400(int camera_id, bool use_high_res = false,
                         const std::string& json_config_file = "");

  ~RealSenseD400() override = default;

  static int get_number_of_cameras();

  const std::string& camera_id() const override { return serial_number_; }

  std::string camera_model() const override { return "realsense_d400"; }

  /**
   * Loads a config file. Can be called after Start(). It is advised to wait
   * (usleep) for a second after loading the new config.
   */
  void LoadJsonConfig(const std::string& json_path);

  /**
   * Toggles all post processing
   */
  void set_post_processing(bool flag) {
    post_process_ = flag;
  }

 private:
  void DoStart(const std::vector<ImageType>& types) override;
  void DoStop() override;

  // TODO(siyuan): figure out how to make this work
  void SetMode(const rs2_rs400_visual_preset mode);

  rs2::config MakeRealSenseConfig(const std::vector<ImageType>& types) const;

  void PollingThread();

  std::shared_ptr<rs2::context> context_;
  rs2::pipeline pipeline_;
  rs2::device camera_;
  rs2::config config_;
  rs2::depth_sensor depth_sensor_;
  const std::string camera_name_;
  const std::string serial_number_;
  const bool use_high_res_{false};

  std::atomic<bool> post_process_{false};

  std::map<ImageType, rs2::stream_profile> supported_streams_;

  double depth_scale_;

  std::atomic<bool> run_{false};
  mutable std::mutex lock_;
  std::thread thread_;
};

}  // namespace rs2_lcm
